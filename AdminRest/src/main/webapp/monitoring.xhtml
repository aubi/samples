<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2024 Payara Foundation and/or its affiliates. All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://xmlns.jcp.org/jsf/passthrough">
<h:head>
    <title>Monitoring Console</title>
    <ui:define name="headScript"><script src="https://cdn.jsdelivr.net/npm/chart.js" type="text/javascript"></script></ui:define>
</h:head>
<h:body>
    <ui:composition template="/WEB-INF/templates/template.xhtml">
        <ui:define name="title">Monitoring Console (kind of)</ui:define>
        <ui:define name="body">
            <ui:fragment>
                <canvas id="myChart" width="400" height="200"></canvas>

                <script type="text/javascript">
                    async function fetchAndUpdateChart() {
                        try {
                            const response = await fetch('resources/monitoring-data'); // Adjusted endpoint
                            const data = await response.json();

                            const cpuUsage = (data.cpuUsage * 100).toFixed(2); // Convert to percentage
                            const memoryUsage = (data.memoryUsage / (1024 * 1024)).toFixed(2); // Convert bytes to MB

                            myChart.data.datasets[0].data.push(cpuUsage);
                            myChart.data.datasets[1].data.push(memoryUsage);

                            // Add new timestamp
                            const now = new Date();
                            myChart.data.labels.push(`${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`);

                            // Keep chart size manageable
                            if (myChart.data.labels.length > 20) {
                                myChart.data.labels.shift();
                                myChart.data.datasets[0].data.shift();
                                myChart.data.datasets[1].data.shift();
                            }

                            // Re-render the chart
                            myChart.update();
                        } catch (error) {
                            console.error("Error updating chart:", error);
                        }
                    }

                    // fetch and update data every 5 seconds
                    setInterval(fetchAndUpdateChart, 5000);

                </script>


                <script type="text/javascript">
                    const ctx = document.getElementById('myChart').getContext('2d');
                    const myChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: [],
                            datasets: [
                                {
                                    label: 'CPU Usage (%)',
                                    data: [],
                                    borderColor: 'rgb(255, 99, 132)',
                                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                    yAxisID: 'y',
                                },
                                {
                                    label: 'Memory Usage (MB)',
                                    data: [],
                                    borderColor: 'rgb(54, 162, 235)',
                                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                    yAxisID: 'y1',
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            interaction: {
                                mode: 'index',
                                intersect: false,
                            },
                            stacked: false,
                            plugins: {
                                legend: {
                                    position: 'top',
                                },
                                title: {
                                    display: true,
                                    text: 'Real-Time Monitoring'
                                }
                            },
                            scales: {
                                y: {
                                    type: 'linear',
                                    display: true,
                                    position: 'left',
                                },
                                y1: {
                                    type: 'linear',
                                    display: true,
                                    position: 'right',
                                    grid: {
                                        drawOnChartArea: false,
                                    },
                                },
                            }
                        }
                    });

                </script>
            </ui:fragment>
        </ui:define>
    </ui:composition>
</h:body>
</html>
